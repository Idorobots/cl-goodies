################################################################################
# Loop grammar used by Pegged.
####################

LoopCode   < Init* (Iterator+ Statement+)+ Finally?
Init       < With
Iterator   < (While / Repeat / For)
Statement  < (If / When / Do / Return / Print / Collect / Count / Sum / Extremum) (:"and" Statement)*

With       < :"with" Variable (:"=" / :"as") Expression

While      < ("while" / "until") Expression

Repeat     < :"repeat" Expression

For        < :"for" Variable (In / From)
In         < (:"in" / :"on" / :"across") (Variable / String)
From       < :"from" Expression ("to" / "above" / "below") Expression

If         < :"if" Expression Statement (:"else" Statement )? :"end"?
When       < ("when" / "unless") Expression Statement :"end"?

Print      < (:"printing" / :"print") Expression (:',' Expression)*
Do         < (:"doing" / :"do") Expression
Return     < (:"returning" / :"return") Expression

Collect    < (:"collecting" / :"collect") Expression (:"into" Variable)?
Count      < (:"counting" / :"count") Expression (:"into" Variable)?
Sum        < (:"summing" / :"sum") Expression (:"into" Variable)?
Extremum   < (("minimizing" / "minimize") / ("maximizing" / "maximize")) Expression (:"into" Variable)?

Finally    < :"finally" Expression

Expression < (Number / String / Variable / DCode)

Number     <~ Floating ( ('e' / 'E') )?
Floating   <~ Integer ('.' Unsigned)?
Unsigned   <~ [0-9]+
Integer    <~ Sign? Unsigned
Sign       <- '-' / '+'

String     <~ DoubleQuote (!DoubleQuote Char)* DoubleQuote
Char       <~ BackSlash ( DoubleQuote
                        / Quote
                        / BackSlash
                        / [bfnrt]
                        / [0-2][0-7][0-7]
                        / [0-7][0-7]?
                        / 'x' Hex Hex
                        / 'u' Hex Hex Hex Hex
                        / 'U' Hex Hex Hex Hex Hex Hex Hex Hex
                        )
              / Anything
Hex        <~ [0-9a-fA-F]

Variable   <~ Identifier

DCode      <~ :DEscape (!DEscape Anything)* :DEscape
DEscape    < "$$"

Anything     <~ .

Comment      <~ Slash Slash (!'\n' Anything)* '\n'
