################################################################################
# Loop grammar used by Pegged.
#
# TODO Add optional (:"finding" Expression) clause to the accumulators.
# TODO Move ThereIs, Never and Always to a separate category and add optional (:"into" Variable) clause.
####################

LoopCode    < Initially* Init* (Iterator+ Statement+)+ Finally*

Initially   < :"initially" Expression

Init        < With
Iterator    < (While / Repeat / For)
Statement   < (Simple / Conditional / Accumulator) (:"and" Statement)?
Simple      < (Do / Print / Return / ThereIs / Never / Always)
Conditional < (If / When)
Accumulator < (Collect / Count / Sum / Min / Max) (:"into" Variable)?

With        < :"with" Variable (:"=" / :"as") Expression

While       < ("while" / "until") Expression
Repeat      < :"repeat" Expression
For         < (:"for" / :"as") Variable (In / From / Being / Below)
In          < (:"in" / :"on" / :"across") Expression
From        < :"from" Expression ("to" / "above" / "below") Expression (:"by" Expression)?
Being       < :"being" (:"the" / :"each")? Expression :"of" Expression
Below       < :"below" Expression

Do          < (:"doing" / :"do") Expression
Print       < (:"printing" / :"print") Expression (:',' Expression)*
Return      < (:"returning" / :"return") Expression
ThereIs     < :"thereis" Expression
Never       < :"never" Expression
Always      < :"always" Expression

If          < :"if" Expression Statement (:"else" Statement )? :"end"?
When        < ("when" / "unless") Expression Statement :"end"?

Collect     < (:"collecting" / :"collect") Expression
Count       < (:"counting" / :"count") Expression
Sum         < (:"summing" / :"sum") Expression
Min         < (:"minimizing" / :"minimize") Expression
Max         < (:"maximizing" / :"maximize") Expression

Finally     < :"finally" Expression

Expression  < (Number / String / Variable / DCode)

Number      <~ Floating ( ('e' / 'E') )?
Floating    <~ Integer ('.' Unsigned)?
Unsigned    <~ [0-9]+ / "0x" [0-9a-fA-F]+
Integer     <~ Sign? Unsigned
Sign        <- '-' / '+'

String      <~ DoubleQuote (!DoubleQuote Char)* DoubleQuote
Char        <~ BackSlash ( DoubleQuote
                         / Quote
                         / BackSlash
                         / [bfnrt]
                         / [0-2][0-7][0-7]
                         / [0-7][0-7]?
                         / 'x' Hex Hex
                         / 'u' Hex Hex Hex Hex
                         / 'U' Hex Hex Hex Hex Hex Hex Hex Hex
                         )
            / Anything
Hex         <~ [0-9a-fA-F]

Variable    <~ Identifier

DCode       <~ :DEscape (!DEscape Anything)* :DEscape
DEscape     < "$$"

Anything    <~ .

Comment     <~ Slash Slash (!'\n' Anything)* '\n'
